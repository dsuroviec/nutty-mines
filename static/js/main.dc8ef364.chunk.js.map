{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["rand","min","max","Math","floor","random","App","useState","x","y","locationX","locationY","setLocation","cells","setCells","barriers","setBarriers","numOfBarriers","setNumOfBarriers","blackout","setBlackout","win","setWin","nutX","nutY","setNut","lives","setlives","points","setPoints","newMaze","setNewMaze","useEffect","newCells","i","j","push","newBarriers","length","randomX","randomY","includes","timer","setTimeout","clearTimeout","timeout","handleKeyDown","e","newLocation","key","preventDefault","newX","newY","document","addEventListener","removeEventListener","setDifficulty","val","id","className","style","gridTemplateColumns","gridTemplateRows","map","cell","index","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById"],"mappings":"2MAMA,SAASA,EAAKC,EAAUC,GACtB,OAAOC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,GAAOA,GAGlD,IA2MeK,EA3MH,WAAO,IAAD,EACQC,mBAAS,CAAC,GAAI,KADtB,yCACRC,EADQ,KACLC,EADK,aAE8BF,mBAAS,CACrDC,EAAI,EACJL,KAAKC,MAAMK,EAAI,MAJD,yCAERC,EAFQ,KAEGC,EAFH,KAEeC,EAFf,OAMUL,mBAAmB,IAN7B,mBAMTM,EANS,KAMFC,EANE,OAOgBP,mBAAmB,IAPnC,mBAOTQ,EAPS,KAOCC,EAPD,OAQ0BT,mBAAS,IARnC,mBAQTU,EARS,KAQMC,EARN,OASgBX,oBAAS,GATzB,mBASTY,EATS,KASCC,EATD,OAUMb,oBAAS,GAVf,mBAUTc,EAVS,KAUJC,EAVI,OAWef,mBAAS,CAAC,EAAGJ,KAAKC,MAAMI,EAAI,KAX3C,yCAWRe,EAXQ,KAWFC,EAXE,KAWKC,EAXL,OAYUlB,mBAAS,GAZnB,mBAYTmB,EAZS,KAYFC,EAZE,OAaYpB,mBAAS,GAbrB,mBAaTqB,EAbS,KAaDC,EAbC,OAcctB,oBAAS,GAdvB,mBAcTuB,GAdS,KAcAC,GAdA,KAmBhBC,qBAAU,WAER,IADA,IAAMC,EAAW,GACRC,EAAI,EAAGA,EAAI1B,EAAG0B,IACrB,IAAK,IAAIC,EAAI,EAAGA,EAAI1B,EAAG0B,IACrBF,EAASG,KAAT,UAAiBF,EAAjB,YAAsBC,IAG1BrB,EAASmB,GAETb,GAAY,GAEZR,EAAY,CAACJ,EAAI,EAAGL,KAAKC,MAAMK,EAAI,KAEnCgB,EAAO,CAAC,EAAGtB,KAAKC,MAAMK,EAAI,KAC1BkB,EAAS,GACTL,GAAO,GAIP,IADA,IAAMe,EAAmB,GAClBA,EAAYC,OAASrB,GAAe,CACzC,IAAMsB,EAAUvC,EAAK,EAAGQ,GAClBgC,EAAUxC,EAAK,EAAGS,GAGtB,UAAG8B,EAAH,YAAcC,KAAd,UAA+B9B,EAA/B,YAA4CC,IAC5C,UAAG4B,EAAH,YAAcC,KAAd,UAA+BjB,EAA/B,YAAuCC,IACtCa,EAAYI,SAAZ,UAAwBF,EAAxB,YAAmCC,KAEpCH,EAAYD,KAAZ,UAAoBG,EAApB,YAA+BC,IAGnCxB,EAAYqB,KACX,CAACpB,EAAea,KAGnBE,qBAAU,WACR,IAAMU,EAAQC,YAAW,WACvBvB,GAAY,KACX,KAEH,OAAO,kBAAMwB,aAAaF,MACzB,CAACZ,KAWJE,qBAAU,WACR,IAAY,IAARX,EAAc,CAChB,IAAMwB,EAAUF,YAAW,WACzBZ,IAAYD,MACX,KAEH,OAAO,kBAAMc,aAAaC,IAG5B,GAAc,IAAVnB,GACY,IAAVA,EAAa,CACf,IAAMgB,EAAQC,YAAW,WACvBZ,IAAYD,IACZD,EAAU,KACT,KAEH,OAAO,kBAAMe,aAAaF,OAG7B,CAACrB,EAAKK,IAMTM,qBAAU,WACR,IAAMc,EAAgB,SAACC,GACrB,IAAIC,EAEJ,OAAQD,EAAEE,KACR,IAAK,YACHD,EAAc,CAACtC,EAAY,EAAGC,GAC9B,MACF,IAAK,UACHqC,EAAc,CAACtC,EAAY,EAAGC,GAC9B,MACF,IAAK,aACHqC,EAAc,CAACtC,EAAWC,EAAY,GACtC,MACF,IAAK,YACHqC,EAAc,CAACtC,EAAWC,EAAY,GAK1C,GAAKqC,EAAL,CAIAD,EAAEG,iBAvB8B,MAyBXF,EAzBW,mBAyBzBG,EAzByB,KAyBnBC,EAzBmB,KA2B5BD,EAAO,GAAKA,GAAQ3C,GAAK4C,EAAO,GAAKA,GAAQ3C,IAK7CM,EAAS0B,SAAT,UAAqBU,EAArB,YAA6BC,IAE3B1B,EAAQ,GAEVC,GAAS,SAACD,GAAD,OAAWA,EAAQ,MAMhCd,EAAY,CAACuC,EAAMC,IAGfD,IAAS5B,GAAQ6B,IAAS5B,IAC5BF,GAAO,GAEPO,GAAU,SAACD,GAAD,OAAYA,EAAS,YAKnC,OADAyB,SAASC,iBAAiB,UAAWR,GAC9B,kBAAMO,SAASE,oBAAoB,UAAWT,OAGvD,IAAMU,GAAgB,SAACC,GACrBvC,EAAiBL,EAAMyB,OAASmB,GAChC1B,IAAYD,IACZD,EAAU,IAGZ,OACE,qBAAK6B,GAAG,YAAR,SACE,sBAAKC,UAAU,aAAf,oFAEE,qBACEA,UAAU,OACVC,MAAO,CACLC,oBAAoB,UAAD,OAAYpD,EAAZ,UACnBqD,iBAAiB,UAAD,OAAYtD,EAAZ,WAJpB,SAOGK,EAAMkD,KAAI,SAACC,EAAMC,GAAP,OACT,sBAAiBN,UAAU,6BAA3B,UACG5C,EAAS0B,SAASuB,KAAU7C,GAAqB,QAAT6C,EACvC,cAAC,IAAD,IAEA,GAEDA,IAAI,UAAQzC,EAAR,YAAgBC,IACrB,UAAGd,EAAH,YAAgBC,KAAhB,UAAmCY,EAAnC,YAA2CC,GACzC,cAAC,IAAD,IAEA,GAEDwC,IAAI,UAAQtD,EAAR,YAAqBC,IAAe,cAAC,IAAD,MAZjCsD,QAgBd,sBAAKN,UAAU,YAAf,UACE,sBAAKA,UAAU,QAAf,UACGjC,EADH,KACW,cAAC,IAAD,CAAaiC,UAAU,aAElC,qBAAKA,UAAU,MAAf,UAA8B,IAARtC,GAAgB,aACtC,8BAAMK,EAAQ,EAAR,kBAAuBE,GAAW,kBAE1C,wBAAQsC,QAnID,WACX9C,GAAY,GACZuB,YAAW,WACTvB,GAAY,KACX,MA+HC,kBACA,wBAAQ8C,QAAS,kBAAMV,GAAc,IAArC,kBACA,wBAAQU,QAAS,kBAAMV,GAAc,IAArC,oBACA,wBAAQU,QAAS,kBAAMV,GAAc,KAArC,wBCjMOW,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCJdQ,IAASC,OAAO,cAAC,EAAD,IAASxB,SAASyB,eAAe,SAKjDX,M","file":"static/js/main.dc8ef364.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { FaSkullCrossbones } from \"react-icons/fa\";\nimport { GiAcorn } from \"react-icons/gi\";\nimport { GiSquirrel } from \"react-icons/gi\";\nimport { AiFillHeart } from \"react-icons/ai\";\n\nfunction rand(min: any, max: any) {\n  return Math.floor(Math.random() * (max - min) + min);\n}\n\nconst App = () => {\n  const [[x, y], setXY] = useState([11, 11]);\n  const [[locationX, locationY], setLocation] = useState([\n    x - 1,\n    Math.floor(y / 2),\n  ]);\n  const [cells, setCells] = useState<string[]>([]);\n  const [barriers, setBarriers] = useState<string[]>([]);\n  const [numOfBarriers, setNumOfBarriers] = useState(11);\n  const [blackout, setBlackout] = useState(false);\n  const [win, setWin] = useState(false);\n  const [[nutX, nutY], setNut] = useState([0, Math.floor(x / 2)]);\n  const [lives, setlives] = useState(3);\n  const [points, setPoints] = useState(0);\n  const [newMaze, setNewMaze] = useState(false);\n\n  // generates new maze initially and\n  // when barriers or newMaze changes\n  // creating an array of all grid locations in a string [\"x,y\",...]\n  useEffect(() => {\n    const newCells = [];\n    for (let i = 0; i < x; i++) {\n      for (let j = 0; j < y; j++) {\n        newCells.push(`${i}x${j}`);\n      }\n    }\n    setCells(newCells);\n    //turns off blackout\n    setBlackout(false);\n    //resets squirrel location\n    setLocation([x - 1, Math.floor(y / 2)]);\n    //resets acorn location\n    setNut([0, Math.floor(y / 2)]);\n    setlives(3);\n    setWin(false);\n\n    //creates random barriers that don't fall on acorn or squirrel and pushes to barriers state\n    const newBarriers: any = [];\n    while (newBarriers.length < numOfBarriers) {\n      const randomX = rand(0, x);\n      const randomY = rand(0, y);\n\n      if (\n        `${randomX}x${randomY}` !== `${locationX}x${locationY}` &&\n        `${randomX}x${randomY}` !== `${nutX}x${nutY}` &&\n        !newBarriers.includes(`${randomX}x${randomY}`)\n      )\n        newBarriers.push(`${randomX}x${randomY}`);\n    }\n\n    setBarriers(newBarriers);\n  }, [numOfBarriers, newMaze]);\n\n  // allows the user to view the barriers upon creation of mase\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setBlackout(true);\n    }, 500);\n\n    return () => clearTimeout(timer);\n  }, [newMaze]);\n\n  //provides a temporary flash of a hint\n  const hint = () => {\n    setBlackout(false);\n    setTimeout(() => {\n      setBlackout(true);\n    }, 100);\n  };\n\n  //change to seperate effects===>\n  useEffect(() => {\n    if (win === true) {\n      const timeout = setTimeout(() => {\n        setNewMaze(!newMaze);\n      }, 2000);\n\n      return () => clearTimeout(timeout);\n    }\n\n    if (lives === 0) {\n      if (lives === 0) {\n        const timer = setTimeout(() => {\n          setNewMaze(!newMaze);\n          setPoints(0);\n        }, 2000);\n\n        return () => clearTimeout(timer);\n      }\n    }\n  }, [win, lives]);\n\n  //Listen to keyboard if up button, subtract from the x 1\n  // if down, add to the x\n  //if right, add to the y\n  // ifLeft, subtract the y\n  useEffect(() => {\n    const handleKeyDown = (e: any) => {\n      let newLocation;\n\n      switch (e.key) {\n        case \"ArrowDown\":\n          newLocation = [locationX + 1, locationY];\n          break;\n        case \"ArrowUp\":\n          newLocation = [locationX - 1, locationY];\n          break;\n        case \"ArrowRight\":\n          newLocation = [locationX, locationY + 1];\n          break;\n        case \"ArrowLeft\":\n          newLocation = [locationX, locationY - 1];\n          break;\n        default:\n      }\n\n      if (!newLocation) {\n        return;\n      }\n\n      e.preventDefault();\n\n      const [newX, newY] = newLocation;\n\n      if (newX < 0 || newX >= x || newY < 0 || newY >= y) {\n        return;\n      }\n\n      // If you're trying to move to where a barrier is\n      if (barriers.includes(`${newX}x${newY}`)) {\n        // If you have at least one life\n        if (lives > 0) {\n          // Take one life away\n          setlives((lives) => lives - 1);\n        }\n\n        return;\n      }\n\n      setLocation([newX, newY]);\n\n      // If the new location is where the nut is\n      if (newX === nutX && newY === nutY) {\n        setWin(true);\n\n        setPoints((points) => points + 100);\n      }\n    };\n\n    document.addEventListener(\"keydown\", handleKeyDown);\n    return () => document.removeEventListener(\"keydown\", handleKeyDown);\n  });\n\n  const setDifficulty = (val: any) => {\n    setNumOfBarriers(cells.length / val);\n    setNewMaze(!newMaze);\n    setPoints(0);\n  };\n\n  return (\n    <div id=\"container\">\n      <div className=\"flash-maze\">\n        Select your level, then use the arrow keys on your keyboard to navigate\n        <div\n          className=\"grid\"\n          style={{\n            gridTemplateColumns: `repeat(${y}, 1fr)`,\n            gridTemplateRows: `repeat(${x}, 1fr)`,\n          }}\n        >\n          {cells.map((cell, index) => (\n            <div key={index} className=\"cell barriers egg location\">\n              {barriers.includes(cell) && !blackout && cell !== \"0x5\" ? (\n                <FaSkullCrossbones />\n              ) : (\n                \"\"\n              )}\n              {cell === `${nutX}x${nutY}` &&\n              `${locationX}x${locationY}` !== `${nutX}x${nutY}` ? (\n                <GiAcorn />\n              ) : (\n                \"\"\n              )}\n              {cell === `${locationX}x${locationY}` && <GiSquirrel />}\n            </div>\n          ))}\n        </div>\n        <div className=\"textField\">\n          <div className=\"lives\">\n            {lives}x <AiFillHeart className=\"heart\" />\n          </div>\n          <div className=\"win\">{win === true && \"You Win!\"}</div>\n          <div>{lives > 0 ? `Points: ${points}` : \"Game Over!\"}</div>\n        </div>\n        <button onClick={hint}>hint</button>\n        <button onClick={() => setDifficulty(3)}>Hard</button>\n        <button onClick={() => setDifficulty(9)}>Normal</button>\n        <button onClick={() => setDifficulty(14)}>Easy</button>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"./styles.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}